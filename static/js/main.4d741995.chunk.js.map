{"version":3,"sources":["assets/github-background.svg","styles/global.ts","pages/Dashboard/style.ts","assets/Logo.svg","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/style.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","gitHubBackground","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Api","axios","create","baseURL","Dashboard","useState","inputError","setInputError","newRepo","setNewRepo","storedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","LogoSvg","alt","Boolean","onSubmit","placeholder","value","onChange","e","target","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","setRepository","issues","setIssues","Promise","all","loadData","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","id","Routes","path","exact","component","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAAe,MAA0B,8C,8aCI1BA,kBAAf,IAS8BC,G,24DCNvB,IAAMC,EAAQC,IAAOC,GAAV,KAOLC,EAAOF,IAAOG,KAAV,KAaX,SAACC,GAAD,OAAWA,EAAMC,UAAYC,YAAlB,OAoBGC,YAAM,GAAK,YAKlBC,EAAQR,IAAOS,KAAV,KAMLC,EAAeV,IAAOW,IAAV,KC1DV,MAA0B,iC,QCE5BC,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,2BCqFIC,EAtEa,WAAO,IAAD,EAEIC,mBAAS,IAFb,mBAEzBC,EAFyB,KAEbC,EAFa,OAGFF,mBAAS,IAHP,mBAGzBG,EAHyB,KAGhBC,EAHgB,OAIQJ,oBAAuB,WAC7D,IAAMK,EAAqBC,aAAaC,QAAQ,gCAChD,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,MATuB,mBAIzBK,EAJyB,KAIXC,EAJW,iDAgBhC,WAAkCC,GAAlC,iBAAAC,EAAA,yDACED,EAAME,iBAEDX,EAHP,uBAIID,EAAc,wDAJlB,mDAS2BP,EAAIoB,IAAJ,gBAA6BZ,IATxD,OASUa,EATV,OAUUC,EAAaD,EAASE,KAE5BP,EAAgB,GAAD,mBAAKD,GAAL,CAAmBO,KAElCf,EAAc,IACdE,EAAW,IAff,kDAkBIF,EAAc,8EAlBlB,2DAhBgC,sBAsChC,OA1BAiB,qBAAU,WACRb,aAAac,QAAQ,+BAAgCZ,KAAKa,UAAUX,MACnE,CAACA,IAyBF,qCACE,qBAAKY,IAAKC,EAASC,IAAI,oBACvB,cAAC1C,EAAD,iDACA,eAACG,EAAD,CAAMG,SAAUqC,QAAQxB,GAAayB,SA1CT,4CA0C5B,UACE,uBAAOC,YAAY,kCACjBC,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAW0B,EAAEC,OAAOH,UAEvC,wBAAQI,KAAK,SAAb,0BAED/B,GAAc,cAACV,EAAD,UAAQU,IACvB,cAACR,EAAD,UACGiB,EAAauB,KAAI,SAAAhB,GAAU,OAC1B,eAAC,IAAD,CAAiCiB,GAAE,uBAAkBjB,EAAWkB,WAAhE,UACE,qBACEb,IAAKL,EAAWmB,MAAMC,WACtBb,IAAKP,EAAWmB,MAAME,QAExB,gCACE,iCAASrB,EAAWkB,YACpB,4BAAIlB,EAAWsB,iBAGjB,cAAC,IAAD,CAAgBC,KAAM,OAVbvB,EAAWkB,oB,i7DCpEzB,IAAMM,EAAS1D,IAAO2D,OAAV,KAsBNC,EAAiB5D,IAAO6D,QAAV,KAuDdC,EAAS9D,IAAOW,IAAV,KC0BJoD,EAvEc,WAAO,IAC1BC,EAAWC,cAAXD,OADyB,EAGG/C,mBAA6B,MAHhC,mBAG1BiB,EAH0B,KAGdgC,EAHc,OAILjD,mBAAmB,IAJd,mBAI1BkD,EAJ0B,KAIlBC,EAJkB,iDAUjC,kCAAAtC,EAAA,sEACqCuC,QAAQC,IAAI,CAC7C1D,EAAIoB,IAAJ,gBAAiBgC,EAAO9B,aACxBtB,EAAIoB,IAAJ,gBAAiBgC,EAAO9B,WAAxB,cAHJ,mCACSA,EADT,KACqBiC,EADrB,KAMED,EAAchC,EAAWC,MACzBiC,EAAUD,EAAOhC,MAPnB,4CAViC,sBAoBjC,OAdAC,qBAAU,YANuB,mCAO/BmC,KACC,CAACP,EAAO9B,aAaT,qCACE,eAACwB,EAAD,WACE,qBAAKnB,IAAKC,EAASC,IAAI,oBACvB,eAAC,IAAD,CAAMU,GAAG,IAAT,UACE,cAAC,IAAD,CAAeM,KAAM,KADvB,eAKAvB,GACA,eAAC0B,EAAD,WACE,mCACE,qBAAKrB,IAAKL,EAAWmB,MAAMC,WAAYb,IAAKP,EAAWmB,MAAME,QAC7D,gCACE,iCAASrB,EAAWkB,YACpB,4BAAIlB,EAAWsB,oBAGnB,+BACE,+BACE,iCAAStB,EAAWsC,iBAAmBtC,EAAWsC,iBAAmB,IACrE,4CAEF,+BACE,iCAAStC,EAAWuC,YAAcvC,EAAWuC,YAAc,IAC3D,4CAEF,+BACE,iCAASvC,EAAWwC,kBAAoBxC,EAAWwC,kBAAoB,IACvE,mDAMR,cAACZ,EAAD,UACGK,EAAOjB,KAAI,SAAAyB,GAAK,OACf,oBAAkBC,KAAMD,EAAME,SAAU7B,OAAO,SAA/C,UACE,gCACE,iCAAS2B,EAAMG,QACf,4BAAIH,EAAMI,KAAKxB,WAGjB,cAAC,IAAD,CAAgBE,KAAM,OANhBkB,EAAMK,aC5ETC,EATU,WACvB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpE,IACjC,cAAC,IAAD,CAAOkE,KAAK,6BAA6BE,UAAWrB,QCS3CsB,MAZf,WACE,OACE,qCAEE,cAAC,IAAD,CAAYC,SAAS,IAArB,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,QCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4d741995.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-background.7fa45dda.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport gitHubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: 'border-box';\n  }\n\n  body {\n    background: #F0F0F5 url(${gitHubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button{\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n`;","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  margin-top: 100px;\n  max-width: 433px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 714px;\n  height: 72px;\n  display: flex;\n\n  input {\n    flex: 1;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    \n    ${(props) => props.hasError && css`\n      border: 2px solid #c43433;\n      border-right: 0;\n    `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n  \n  button {\n    width: 210px;\n    background: #04D361;\n    border-radius: 0px 5px 5px 0px;\n    border: 0;\n    color:#fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04D361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  margin-top: 16px;\n  color: #c43433;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 120px;\n  max-width: 714px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.3s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover{\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 83px;\n      height: 83px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3D3D4D;\n      }\n      \n      p{\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n        max-width: 550px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #C9C9D4;\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/Logo.469cc31b.svg\";","import axios from 'axios';\n\nexport const Api = axios.create({\n  baseURL: 'https://api.github.com'\n});","import React, { FormEvent, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi'\nimport { Title, Form, Repositories, Error } from './style';\n\nimport LogoSvg from '../../assets/Logo.svg';\n\nimport { Api } from '../../services/api';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n\n  const [inputError, setInputError] = useState('');\n  const [newRepo, setNewRepo] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storedRepositories = localStorage.getItem('@GitHubExplorer:repositories');\n    if (storedRepositories) {\n      return JSON.parse(storedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('@GitHubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function handleRepositories(event: FormEvent<HTMLFormElement>): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Você deve digitar um autor/nome do repositório');\n      return;\n    }\n\n    try {\n      const response = await Api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n\n      setInputError('');\n      setNewRepo('');\n\n    } catch (error) {\n      setInputError('Houve um erro na busca pelo autor/nome do repositório. Tente novamente.')\n    }\n  }\n\n  return (\n    <>\n      <img src={LogoSvg} alt='GitHub Explorer' />\n      <Title>Explore repositórios no Github.</Title>\n      <Form hasError={Boolean(inputError)} onSubmit={handleRepositories}>\n        <input placeholder=\"Digite o nome do repositório\"\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n      <Repositories>\n        {repositories.map(repository => (\n          <Link key={repository.full_name} to={`repositories/${repository.full_name}`}>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n}\n\nexport default Dashboard;","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover{\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 20px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n\n      & + li {\n        margin-left: 80px;\n      }\n      \n      strong { \n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n      \n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.3s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover{\n      transform: translateX(10px);\n    }\n\n    div {\n      margin-left: 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3D3D4D;\n      }\n      \n      p{\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n        max-width: 550px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #C9C9D4;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\n\nimport LogoSvg from '../../assets/Logo.svg';\n\nimport { Header, Issues, RepositoryInfo } from './style';\nimport { Api } from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface IRepository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface IIssue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  }\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  const [repository, setRepository] = useState<IRepository | null>(null);\n  const [issues, setIssues] = useState<IIssue[]>([]);\n\n  useEffect(() => {\n    loadData();\n  }, [params.repository]);\n\n  async function loadData() {\n    const [repository, issues] = await Promise.all([\n      Api.get(`repos/${params.repository}`),\n      Api.get(`repos/${params.repository}/issues`)\n    ]);\n\n    setRepository(repository.data);\n    setIssues(issues.data);\n  }\n\n  return (\n    <>\n      <Header>\n        <img src={LogoSvg} alt='GitHub Explorer' />\n        <Link to='/'>\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n      { repository && (\n        <RepositoryInfo>\n          <header>\n            <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count ? repository.stargazers_count : 0}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count ? repository.forks_count : 0}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count ? repository.open_issues_count : 0}</strong>\n              <span>Issues</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url} target='_blank'>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n}\n\nexport default Repository;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => {\n  return (\n    <Switch>\n      <Route path='/' exact component={Dashboard} />\n      <Route path='/repositories/:repository+' component={Repository} />\n    </Switch>\n  );\n};\n\nexport default Routes;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\n\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <>\n      {/* Changed BrowserRouter to HashRouter because of GitHub Pages */}\n      <HashRouter basename='/'>\n        <Routes />\n      </HashRouter>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}